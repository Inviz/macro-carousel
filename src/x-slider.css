/*******************************************************************************
  Host and CSS properties
*******************************************************************************/

:host {
  position: relative;

  display: flex;
  flex-direction: column;
  align-items: stretch;

  contain: content;

  --x-slider-gap: 16px;

  --x-slider-background-color: transparent;

  --x-slider-slide-min-height: 0px;
  --x-slider-slide-max-height: none;

  --x-slider-transition-duration: .6s;
  --x-slider-transition-timing-function: cubic-bezier(.25, .46, .45, .94);

  --x-slider-navigation-color: #000;
  --x-slider-navigation-color-focus: var(--x-slider-navigation-color);
  --x-slider-navigation-background-color: transparent;
  --x-slider-navigation-background-color-focus: #f0f0f0;
  --x-slider-navigation-button-size: 48px;
  --x-slider-navigation-icon-size: 24px;
  --x-slider-navigation-icon-mask: svg-load('./arrow-left.svg', fill: #000);

  --x-slider-pagination-color: #999;
  --x-slider-pagination-color-selected: #000;
  --x-slider-pagination-size-clickable: 24px;
  --x-slider-pagination-size-dot: 8px;
  --x-slider-pagination-gap: 2px;
  --x-slider-pagination-height: 44px;

  --x-slider__internal__slides-per-view: 1;
}

:host([hidden]) {
  display: none
}

/* focus-visible polyfill: no outline on :focus when it's not .focus-visible */
:host-context(.js-focus-visible) :focus:not(.focus-visible),
:host-context(.js-focus-visible) ::slotted(*:focus:not(.focus-visible)) {
  outline: 0;
}

/*******************************************************************************
  External wrapper: fixed size, containment, bg color, touch-action, pointer.
*******************************************************************************/
#externalWrapper {
  height: 100%;

  overflow: hidden;
  contain: paint;

  background-color: var(--x-slider-background-color);

  /*
    https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md
  */
  touch-action: pan-y pinch-zoom;

  cursor: grab;
}

:host([pointer-down]) #externalWrapper {
  cursor: grabbing;
}

:host([disable-drag]) #externalWrapper,
:host([disable-drag][pointer-down]) #externalWrapper {
  cursor: default;
}

/*******************************************************************************
  Slides wrapper: flexbox container, is the transitioning element when moving
  the slides.
*******************************************************************************/
#slidesWrapper {
  display: flex;
  align-items: stretch;

  height: 100%;
  min-height: var(--x-slider-slide-min-height);
  max-height: var(--x-slider-slide-max-height);

  will-change: transform;
}

:host([transitioning]) #slidesWrapper {
  transition-property: transform;
  transition-duration: var(--x-slider-transition-duration);
  transition-timing-function: var(--x-slider-transition-timing-function);
}

/*******************************************************************************
  Slides: width is calculated with a css formula
*******************************************************************************/
#slidesWrapper ::slotted(*) {
  flex-grow: 0;
  flex-shrink: 0;
  /* (100% - gap * (slidesPerView - 1)) / slidesPerView */
  flex-basis: calc((100% - (var(--x-slider__internal__slides-per-view) - 1) *
      var(--x-slider-gap)) / var(--x-slider__internal__slides-per-view));

  min-height: var(--x-slider-slide-min-height);
  max-height: var(--x-slider-slide-max-height);

  margin-right: var(--x-slider-gap);

  /*
   * Enforces the slides to keep their size even if the content requires
   * a bigger slide size.
   */
  overflow: hidden;

  outline: 0;

  user-select: none;
}

:host([disable-drag]) #slidesWrapper ::slotted(*) {
  user-select: auto;
}

/*******************************************************************************
  Pagination styles
*******************************************************************************/
#pagination {
  display: none;
}

:host([pagination]) #pagination {
  align-self: center;

  display: flex;
  align-items: center;
  justify-content: center;

  width: 100%;
  height: var(--x-slider-pagination-height);
  min-height: var(--x-slider-pagination-size-clickable);

  contain: strict;

  font-size: 0;
}

#pagination ::slotted(button) {
  position: relative;

  width: var(--x-slider-pagination-size-clickable);
  height: var(--x-slider-pagination-size-clickable);

  margin: 0 calc(var(--x-slider-pagination-gap) / 2);
  padding: 0;

  border: none;
  background: none;

  font-size: inherit;

  cursor: pointer;

  opacity: .8;
}

#pagination ::slotted(button)::before,
#pagination ::slotted(button)::after {
  position: absolute;
  top: 50%;
  left: 50%;

  transform: translate(-50%, -50%);

  display: block;

  width: var(--x-slider-pagination-size-dot);
  height: var(--x-slider-pagination-size-dot);

  border-radius: 50%;
  box-sizing: border-box;

  background-color: var(--x-slider-pagination-color);

  content: '';
}

#pagination ::slotted(button)::before {
  transform: translate(-50%, -50%) scale(2);

  opacity: 0;

  will-change: opacity;
}

#pagination ::slotted(button:hover),
#pagination ::slotted(.disabled) {
  opacity: 1;
}

#pagination ::slotted(button:active)::before,
#pagination ::slotted(button.focus-visible)::before {
  opacity: .2;
}

#pagination ::slotted(.disabled)::after {
  background-color: var(--x-slider-pagination-color-selected);
}

/*******************************************************************************
  Navigation styles
*******************************************************************************/
#navigation {
  display: none;
}

:host([navigation]) #navigation {
  display: block;
}

#navigation ::slotted(button) {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);

  display: flex;
  align-items: center;
  justify-content: center;

  min-width: var(--x-slider-navigation-button-size);
  min-height: var(--x-slider-navigation-button-size);
  padding: 0;

  background: none;
  background-color: var(--x-slider-navigation-background-color);
  border: 0;
  border-radius: 50%;

  overflow: hidden;

  cursor: pointer;
}

:host([pagination]) #navigation ::slotted(button) {
  top: calc(50% - var(--x-slider-pagination-height) / 2);
}

#navigation ::slotted(.x-slider-previous) {
  left: 0;
}

#navigation ::slotted(.x-slider-next) {
  right: 0;
}

#navigation ::slotted(button)::before,
#navigation ::slotted(button)::after {
  position: absolute;

  content: '';
}

#navigation ::slotted(button)::after {
  top: calc((var(--x-slider-navigation-button-size) - var(--x-slider-navigation-icon-size)) / 2);
  right: calc((var(--x-slider-navigation-button-size) - var(--x-slider-navigation-icon-size)) / 2);
  width: var(--x-slider-navigation-icon-size);
  height: var(--x-slider-navigation-icon-size);

  /* Fallback for when mask-image is not supported: using a `<` character */
  color: var(--x-slider-navigation-color);
  content: '<';
  font-size: calc(var(--x-slider-navigation-icon-size)* 0.85);
  line-height: calc(var(--x-slider-navigation-icon-size)* 0.85);
}

@supports (mask-image: var(--x-slider-navigation-icon-mask)) {
  #navigation ::slotted(button)::after {
    background-color: var(--x-slider-navigation-color);

    content: '';

    /* References:
    * - https://developer.mozilla.org/en-US/docs/Web/CSS/mask-image
    * - https://codepen.io/tigt/post/optimizing-svgs-in-data-uris
    */
    mask-image: var(--x-slider-navigation-icon-mask);
  }
}

#navigation ::slotted(.x-slider-next)::after {
  transform: rotateZ(180deg);
}

#navigation ::slotted(button)::before {
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;

  background-color: var(--x-slider-navigation-background-color-focus);

  opacity: 0;

  will-change: opacity;
}

/*
 * Show the bg circle when the button is not disabled and is hovered, active,
 * focused or keyboard-focused (thanks to the focus-visible polyfill).
 */
#navigation ::slotted(button:hover:not(:disabled))::before,
#navigation ::slotted(button:active:not(:disabled))::before,
#navigation ::slotted(button:focus:not(:disabled))::before,
:host-context(.js-focus-visible) #navigation ::slotted(button.focus-visible)::before {
  opacity: 1;
}

#navigation ::slotted(button:hover:not(:disabled))::after,
#navigation ::slotted(button:active:not(:disabled))::after,
#navigation ::slotted(button:focus:not(:disabled))::after,
:host-context(.js-focus-visible) #navigation ::slotted(button.focus-visible)::after {
  background-color: var(--x-slider-navigation-color-focus);
}

/*
 * Do not show the bg circle if the button is focused (but not active or not hovered)
 * and doesn't have a focused-visible class. This means, do not leave the bg showing
 * after the user clicks on the button.
 */
:host-context(.js-focus-visible) #navigation ::slotted(button:focus:not(:active):not(:hover):not(.focus-visible))::before {
  opacity: 0;
}

:host-context(.js-focus-visible) #navigation ::slotted(button:focus:not(:active):not(:hover):not(.focus-visible))::after {
  background-color: var(--x-slider-navigation-color);
}

#navigation ::slotted(button[disabled]) {
  opacity: .2;
}

/*******************************************************************************
  aria-live styles
*******************************************************************************/
#aria-live ::slotted(*) {
  position: absolute;

  height: 1px;
  width: 1px;

  margin: -1px;
  padding: 0;

  clip: rect(0 0 0 0);

  overflow: hidden;

  border: 0;
}

/*******************************************************************************
 * Print styles:
 * - Show all slides and stack them vertically
 * - Eliminate the slide gap, show an outline
 * - make sure the page doesn't break a slide in half
 * - hide pagination and navigation buttons
*******************************************************************************/

@media print {
  #slidesWrapper ::slotted(*) {
    margin-right: 0;
    margin-bottom: .2em;

    outline: 1px solid #000;

    color: #000;

    page-break-inside: avoid;
  }

  /* Remove the navigational buttons, they provide no context in print */
   :host([navigation]) #navigation,
   :host([pagination]) #pagination {
    display: none;
  }

  /* Stack the slides */
  #slidesWrapper {
    display: block;

    transform: none !important;
    transition: 0s;
  }
}
